.TH "src/ho_recognize.h" 3 "23 Jul 2008" "Version 0.10.14" "libhocr" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/ho_recognize.h \- libhocr C language header. 
.SH SYNOPSIS
.br
.PP
\fC#include <ho_bitmap.h>\fP
.br
\fC#include <ho_objmap.h>\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBHO_RECOGNIZE_H\fP   1"
.br
.ti -1c
.RI "#define \fBHO_ARRAY_IN_SIZE\fP   104"
.br
.ti -1c
.RI "#define \fBHO_ARRAY_OUT_SIZE\fP   51"
.br
.ti -1c
.RI "#define \fBHEIGHT\fP   (array_in[0])"
.br
.ti -1c
.RI "#define \fBWIDTH\fP   (array_in[1])"
.br
.ti -1c
.RI "#define \fBWIDTH_BY_HEIGHT\fP   (array_in[2])"
.br
.ti -1c
.RI "#define \fBTOP\fP   (array_in[3])"
.br
.ti -1c
.RI "#define \fBBOTTOM\fP   (array_in[4])"
.br
.ti -1c
.RI "#define \fBTOP_LEFT\fP   (array_in[5])"
.br
.ti -1c
.RI "#define \fBTOP_MID\fP   (array_in[6])"
.br
.ti -1c
.RI "#define \fBTOP_RIGHT\fP   (array_in[7])"
.br
.ti -1c
.RI "#define \fBMID_LEFT\fP   (array_in[8])"
.br
.ti -1c
.RI "#define \fBMID_RIGHT\fP   (array_in[9])"
.br
.ti -1c
.RI "#define \fBBOTTOM_LEFT\fP   (array_in[10])"
.br
.ti -1c
.RI "#define \fBBOTTOM_MID\fP   (array_in[11])"
.br
.ti -1c
.RI "#define \fBBOTTOM_RIGHT\fP   (array_in[12])"
.br
.ti -1c
.RI "#define \fBTWO_VLINES_UP\fP   (array_in[13])"
.br
.ti -1c
.RI "#define \fBTWO_VLINES_DOWN\fP   (array_in[14])"
.br
.ti -1c
.RI "#define \fBTHREE_VLINES_UP\fP   (array_in[15])"
.br
.ti -1c
.RI "#define \fBTHREE_VLINES_DOWN\fP   (array_in[16])"
.br
.ti -1c
.RI "#define \fBTOP_HBAR\fP   (array_in[17])"
.br
.ti -1c
.RI "#define \fBMID_HBAR\fP   (array_in[18])"
.br
.ti -1c
.RI "#define \fBBOTTOM_HBAR\fP   (array_in[19])"
.br
.ti -1c
.RI "#define \fBLEFT_VBAR\fP   (array_in[20])"
.br
.ti -1c
.RI "#define \fBMID_VBAR\fP   (array_in[21])"
.br
.ti -1c
.RI "#define \fBRIGHT_VBAR\fP   (array_in[22])"
.br
.ti -1c
.RI "#define \fBDIAGONAL_BAR\fP   (array_in[23])"
.br
.ti -1c
.RI "#define \fBDIAGONAL_LEFT_BAR\fP   (array_in[24])"
.br
.ti -1c
.RI "#define \fBTOP_LEFT_EDGE\fP   (array_in[25])"
.br
.ti -1c
.RI "#define \fBMID_LEFT_EDGE\fP   (array_in[26])"
.br
.ti -1c
.RI "#define \fBBOTTOM_LEFT_EDGE\fP   (array_in[27])"
.br
.ti -1c
.RI "#define \fBTOP_RIGTH_EDGE\fP   (array_in[28])"
.br
.ti -1c
.RI "#define \fBMID_RIGTH_EDGE\fP   (array_in[29])"
.br
.ti -1c
.RI "#define \fBBOTTOM_RIGTH_EDGE\fP   (array_in[30])"
.br
.ti -1c
.RI "#define \fBLEFT_TOP_EDGE\fP   (array_in[31])"
.br
.ti -1c
.RI "#define \fBMID_TOP_EDGE\fP   (array_in[32])"
.br
.ti -1c
.RI "#define \fBRIGHT_TOP_EDGE\fP   (array_in[33])"
.br
.ti -1c
.RI "#define \fBLEFT_BOTTOM_EDGE\fP   (array_in[34])"
.br
.ti -1c
.RI "#define \fBMID_BOTTOM_EDGE\fP   (array_in[35])"
.br
.ti -1c
.RI "#define \fBRIGHT_BOTTOM_EDGE\fP   (array_in[36])"
.br
.ti -1c
.RI "#define \fBTOP_LEFT_NOTCH\fP   (array_in[37])"
.br
.ti -1c
.RI "#define \fBMID_LEFT_NOTCH\fP   (array_in[38])"
.br
.ti -1c
.RI "#define \fBBOTTOM_LEFT_NOTCH\fP   (array_in[39])"
.br
.ti -1c
.RI "#define \fBTOP_RIGHT_NOTCH\fP   (array_in[40])"
.br
.ti -1c
.RI "#define \fBMID_RIGHT_NOTCH\fP   (array_in[41])"
.br
.ti -1c
.RI "#define \fBBOTTOM_RIGHT_NOTCH\fP   (array_in[42])"
.br
.ti -1c
.RI "#define \fBLEFT_TOP_NOTCH\fP   (array_in[43])"
.br
.ti -1c
.RI "#define \fBMID_TOP_NOTCH\fP   (array_in[44])"
.br
.ti -1c
.RI "#define \fBRIGHT_TOP_NOTCH\fP   (array_in[45])"
.br
.ti -1c
.RI "#define \fBLEFT_BOTTOM_NOTCH\fP   (array_in[46])"
.br
.ti -1c
.RI "#define \fBMID_BOTTOM_NOTCH\fP   (array_in[47])"
.br
.ti -1c
.RI "#define \fBRIGHT_BOTTOM_NOTCH\fP   (array_in[48])"
.br
.ti -1c
.RI "#define \fBTOP_LEFT_END\fP   (array_in[49])"
.br
.ti -1c
.RI "#define \fBTOP_MID_END\fP   (array_in[50])"
.br
.ti -1c
.RI "#define \fBTOP_RIGHT_END\fP   (array_in[51])"
.br
.ti -1c
.RI "#define \fBMID_LEFT_END\fP   (array_in[52])"
.br
.ti -1c
.RI "#define \fBMID_MID_END\fP   (array_in[53])"
.br
.ti -1c
.RI "#define \fBMID_RIGHT_END\fP   (array_in[54])"
.br
.ti -1c
.RI "#define \fBBOTTOM_LEFT_END\fP   (array_in[55])"
.br
.ti -1c
.RI "#define \fBBOTTOM_MID_END\fP   (array_in[56])"
.br
.ti -1c
.RI "#define \fBBOTTOM_RIGHT_END\fP   (array_in[57])"
.br
.ti -1c
.RI "#define \fBTOP_LEFT_CROSS\fP   (array_in[58])"
.br
.ti -1c
.RI "#define \fBTOP_MID_CROSS\fP   (array_in[59])"
.br
.ti -1c
.RI "#define \fBTOP_RIGHT_CROSS\fP   (array_in[60])"
.br
.ti -1c
.RI "#define \fBMID_LEFT_CROSS\fP   (array_in[61])"
.br
.ti -1c
.RI "#define \fBMID_MID_CROSS\fP   (array_in[62])"
.br
.ti -1c
.RI "#define \fBMID_RIGHT_CROSS\fP   (array_in[63])"
.br
.ti -1c
.RI "#define \fBBOTTOM_LEFT_CROSS\fP   (array_in[64])"
.br
.ti -1c
.RI "#define \fBBOTTOM_MID_CROSS\fP   (array_in[65])"
.br
.ti -1c
.RI "#define \fBBOTTOM_RIGHT_CROSS\fP   (array_in[66])"
.br
.ti -1c
.RI "#define \fBONE_HOLE\fP   (array_in[67])"
.br
.ti -1c
.RI "#define \fBTWO_HOLES\fP   (array_in[68])"
.br
.ti -1c
.RI "#define \fBHEY_PART\fP   (array_in[69])"
.br
.ti -1c
.RI "#define \fBDOT_PART\fP   (array_in[70])"
.br
.ti -1c
.RI "#define \fBCOMMA_PART\fP   (array_in[71])"
.br
.ti -1c
.RI "#define \fBHOLE_TOP_LEFT_EDGE\fP   (array_in[72])"
.br
.ti -1c
.RI "#define \fBHOLE_MID_LEFT_EDGE\fP   (array_in[73])"
.br
.ti -1c
.RI "#define \fBHOLE_BOTTOM_LEFT_EDGE\fP   (array_in[74])"
.br
.ti -1c
.RI "#define \fBHOLE_TOP_RIGTH_EDGE\fP   (array_in[75])"
.br
.ti -1c
.RI "#define \fBHOLE_MID_RIGTH_EDGE\fP   (array_in[76])"
.br
.ti -1c
.RI "#define \fBHOLE_BOTTOM_RIGTH_EDGE\fP   (array_in[77])"
.br
.ti -1c
.RI "#define \fBHOLE_LEFT_TOP_EDGE\fP   (array_in[78])"
.br
.ti -1c
.RI "#define \fBHOLE_MID_TOP_EDGE\fP   (array_in[79])"
.br
.ti -1c
.RI "#define \fBHOLE_RIGHT_TOP_EDGE\fP   (array_in[80])"
.br
.ti -1c
.RI "#define \fBHOLE_LEFT_BOTTOM_EDGE\fP   (array_in[81])"
.br
.ti -1c
.RI "#define \fBHOLE_MID_BOTTOM_EDGE\fP   (array_in[82])"
.br
.ti -1c
.RI "#define \fBHOLE_RIGHT_BOTTOM_EDGE\fP   (array_in[83])"
.br
.ti -1c
.RI "#define \fBHOLE_HEIGHT\fP   (array_in[84])"
.br
.ti -1c
.RI "#define \fBHOLE_WIDTH\fP   (array_in[85])"
.br
.ti -1c
.RI "#define \fBHOLE_TOP\fP   (array_in[86])"
.br
.ti -1c
.RI "#define \fBHOLE_BOTTOM\fP   (array_in[87])"
.br
.ti -1c
.RI "#define \fBHOLE_TOP_LEFT\fP   (array_in[88])"
.br
.ti -1c
.RI "#define \fBHOLE_TOP_RIGHT\fP   (array_in[89])"
.br
.ti -1c
.RI "#define \fBHOLE_BOTTOM_LEFT\fP   (array_in[90])"
.br
.ti -1c
.RI "#define \fBHOLE_BOTTOM_RIGHT\fP   (array_in[91])"
.br
.ti -1c
.RI "#define \fBBIG_TOP_LEFT_EDGE\fP   (array_in[92])"
.br
.ti -1c
.RI "#define \fBBIG_MID_LEFT_EDGE\fP   (array_in[93])"
.br
.ti -1c
.RI "#define \fBBIG_BOTTOM_LEFT_EDGE\fP   (array_in[94])"
.br
.ti -1c
.RI "#define \fBBIG_TOP_RIGTH_EDGE\fP   (array_in[95])"
.br
.ti -1c
.RI "#define \fBBIG_MID_RIGTH_EDGE\fP   (array_in[96])"
.br
.ti -1c
.RI "#define \fBBIG_BOTTOM_RIGTH_EDGE\fP   (array_in[97])"
.br
.ti -1c
.RI "#define \fBBIG_LEFT_TOP_EDGE\fP   (array_in[98])"
.br
.ti -1c
.RI "#define \fBBIG_MID_TOP_EDGE\fP   (array_in[99])"
.br
.ti -1c
.RI "#define \fBBIG_RIGHT_TOP_EDGE\fP   (array_in[100])"
.br
.ti -1c
.RI "#define \fBBIG_LEFT_BOTTOM_EDGE\fP   (array_in[101])"
.br
.ti -1c
.RI "#define \fBBIG_MID_BOTTOM_EDGE\fP   (array_in[102])"
.br
.ti -1c
.RI "#define \fBBIG_RIGHT_BOTTOM_EDGE\fP   (array_in[103])"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBho_recognize_array_in_size\fP ()"
.br
.ti -1c
.RI "int \fBho_recognize_array_out_size\fP ()"
.br
.ti -1c
.RI "int \fBho_recognize_create_array_in\fP (const \fBho_bitmap\fP *m_text, const \fBho_bitmap\fP *m_mask, double *array_in)"
.br
.ti -1c
.RI "int \fBho_recognize_create_array_out\fP (const double *array_in, double *array_out, int font_code)"
.br
.ti -1c
.RI "const char * \fBho_recognize_array_out_to_font\fP (const double *array_out)"
.br
.ti -1c
.RI "const char * \fBho_recognize_font\fP (const \fBho_bitmap\fP *m_text, const \fBho_bitmap\fP *m_mask, int font_code)"
.br
.ti -1c
.RI "int \fBho_recognize_dimentions\fP (const \fBho_bitmap\fP *m_text, const \fBho_bitmap\fP *m_mask, double *height, double *width, double *top, double *bottom, double *top_left, double *top_mid, double *top_right, double *mid_left, double *mid_right, double *bottom_left, double *bottom_mid, double *bottom_right, double *has_two_hlines_up, double *has_two_hlines_down, double *has_three_hlines_up, double *has_three_hlines_down)"
.br
.ti -1c
.RI "int \fBho_recognize_bars\fP (const \fBho_bitmap\fP *m_text, const \fBho_bitmap\fP *m_mask, double *has_top_bar, double *has_mid_hbar, double *has_bottom_bar, double *has_left_bar, double *has_mid_vbar, double *has_right_bar, double *has_diagonal_bar, double *has_diagonal_left_bar)"
.br
.ti -1c
.RI "int \fBho_recognize_edges\fP (const \fBho_bitmap\fP *m_text, const \fBho_bitmap\fP *m_mask, double *has_top_left_edge, double *has_mid_left_edge, double *has_bottom_left_edge, double *has_top_right_edge, double *has_mid_right_edge, double *has_bottom_right_edge, double *has_left_top_edge, double *has_mid_top_edge, double *has_right_top_edge, double *has_left_bottom_edge, double *has_mid_bottom_edge, double *has_right_bottom_edge)"
.br
.ti -1c
.RI "int \fBho_recognize_edges_big\fP (const \fBho_bitmap\fP *m_text, const \fBho_bitmap\fP *m_mask, double *has_top_left_edge, double *has_mid_left_edge, double *has_bottom_left_edge, double *has_top_right_edge, double *has_mid_right_edge, double *has_bottom_right_edge, double *has_left_top_edge, double *has_mid_top_edge, double *has_right_top_edge, double *has_left_bottom_edge, double *has_mid_bottom_edge, double *has_right_bottom_edge)"
.br
.ti -1c
.RI "int \fBho_recognize_notches\fP (const \fBho_bitmap\fP *m_text, const \fBho_bitmap\fP *m_mask, double *has_top_left_notch, double *has_mid_left_notch, double *has_bottom_left_notch, double *has_top_right_notch, double *has_mid_right_notch, double *has_bottom_right_notch, double *has_left_top_notch, double *has_mid_top_notch, double *has_right_top_notch, double *has_left_bottom_notch, double *has_mid_bottom_notch, double *has_right_bottom_notch)"
.br
.ti -1c
.RI "int \fBho_recognize_parts\fP (const \fBho_bitmap\fP *m_text, const \fBho_bitmap\fP *m_mask, double *has_one_hole, double *has_two_holes, double *has_hey_part, double *has_dot_part, double *has_comma_part)"
.br
.ti -1c
.RI "int \fBho_recognize_ends\fP (const \fBho_bitmap\fP *m_text, const \fBho_bitmap\fP *m_mask, double *has_top_left_end, double *has_top_mid_end, double *has_top_right_end, double *has_mid_left_end, double *has_mid_mid_end, double *has_mid_right_end, double *has_bottom_left_end, double *has_bottom_mid_end, double *has_bottom_right_end, double *has_top_left_cross, double *has_top_mid_cross, double *has_top_right_cross, double *has_mid_left_cross, double *has_mid_mid_cross, double *has_mid_right_cross, double *has_bottom_left_cross, double *has_bottom_mid_cross, double *has_bottom_right_cross)"
.br
.ti -1c
.RI "int \fBho_recognize_holes_dimentions\fP (const \fBho_bitmap\fP *m_text, const \fBho_bitmap\fP *m_mask, double *height, double *width, double *top, double *bottom, double *top_left, double *top_right, double *bottom_left, double *bottom_right)"
.br
.ti -1c
.RI "int \fBho_recognize_holes_edges\fP (const \fBho_bitmap\fP *m_text, const \fBho_bitmap\fP *m_mask, double *has_top_left_edge, double *has_mid_left_edge, double *has_bottom_left_edge, double *has_top_right_edge, double *has_mid_right_edge, double *has_bottom_right_edge, double *has_left_top_edge, double *has_mid_top_edge, double *has_right_top_edge, double *has_left_bottom_edge, double *has_mid_bottom_edge, double *has_right_bottom_edge)"
.br
.in -1c
.SH "Detailed Description"
.PP 
libhocr C language header. 

libhocr - LIBrary for Hebrew Optical Character Recognition 
.SH "Define Documentation"
.PP 
.SS "#define HO_RECOGNIZE_H   1"
.PP
.SS "#define HO_ARRAY_IN_SIZE   104"
.PP
.SS "#define HO_ARRAY_OUT_SIZE   51"
.PP
.SS "#define HEIGHT   (array_in[0])"
.PP
.SS "#define WIDTH   (array_in[1])"
.PP
.SS "#define WIDTH_BY_HEIGHT   (array_in[2])"
.PP
.SS "#define TOP   (array_in[3])"
.PP
.SS "#define BOTTOM   (array_in[4])"
.PP
.SS "#define TOP_LEFT   (array_in[5])"
.PP
.SS "#define TOP_MID   (array_in[6])"
.PP
.SS "#define TOP_RIGHT   (array_in[7])"
.PP
.SS "#define MID_LEFT   (array_in[8])"
.PP
.SS "#define MID_RIGHT   (array_in[9])"
.PP
.SS "#define BOTTOM_LEFT   (array_in[10])"
.PP
.SS "#define BOTTOM_MID   (array_in[11])"
.PP
.SS "#define BOTTOM_RIGHT   (array_in[12])"
.PP
.SS "#define TWO_VLINES_UP   (array_in[13])"
.PP
.SS "#define TWO_VLINES_DOWN   (array_in[14])"
.PP
.SS "#define THREE_VLINES_UP   (array_in[15])"
.PP
.SS "#define THREE_VLINES_DOWN   (array_in[16])"
.PP
.SS "#define TOP_HBAR   (array_in[17])"
.PP
.SS "#define MID_HBAR   (array_in[18])"
.PP
.SS "#define BOTTOM_HBAR   (array_in[19])"
.PP
.SS "#define LEFT_VBAR   (array_in[20])"
.PP
.SS "#define MID_VBAR   (array_in[21])"
.PP
.SS "#define RIGHT_VBAR   (array_in[22])"
.PP
.SS "#define DIAGONAL_BAR   (array_in[23])"
.PP
.SS "#define DIAGONAL_LEFT_BAR   (array_in[24])"
.PP
.SS "#define TOP_LEFT_EDGE   (array_in[25])"
.PP
.SS "#define MID_LEFT_EDGE   (array_in[26])"
.PP
.SS "#define BOTTOM_LEFT_EDGE   (array_in[27])"
.PP
.SS "#define TOP_RIGTH_EDGE   (array_in[28])"
.PP
.SS "#define MID_RIGTH_EDGE   (array_in[29])"
.PP
.SS "#define BOTTOM_RIGTH_EDGE   (array_in[30])"
.PP
.SS "#define LEFT_TOP_EDGE   (array_in[31])"
.PP
.SS "#define MID_TOP_EDGE   (array_in[32])"
.PP
.SS "#define RIGHT_TOP_EDGE   (array_in[33])"
.PP
.SS "#define LEFT_BOTTOM_EDGE   (array_in[34])"
.PP
.SS "#define MID_BOTTOM_EDGE   (array_in[35])"
.PP
.SS "#define RIGHT_BOTTOM_EDGE   (array_in[36])"
.PP
.SS "#define TOP_LEFT_NOTCH   (array_in[37])"
.PP
.SS "#define MID_LEFT_NOTCH   (array_in[38])"
.PP
.SS "#define BOTTOM_LEFT_NOTCH   (array_in[39])"
.PP
.SS "#define TOP_RIGHT_NOTCH   (array_in[40])"
.PP
.SS "#define MID_RIGHT_NOTCH   (array_in[41])"
.PP
.SS "#define BOTTOM_RIGHT_NOTCH   (array_in[42])"
.PP
.SS "#define LEFT_TOP_NOTCH   (array_in[43])"
.PP
.SS "#define MID_TOP_NOTCH   (array_in[44])"
.PP
.SS "#define RIGHT_TOP_NOTCH   (array_in[45])"
.PP
.SS "#define LEFT_BOTTOM_NOTCH   (array_in[46])"
.PP
.SS "#define MID_BOTTOM_NOTCH   (array_in[47])"
.PP
.SS "#define RIGHT_BOTTOM_NOTCH   (array_in[48])"
.PP
.SS "#define TOP_LEFT_END   (array_in[49])"
.PP
.SS "#define TOP_MID_END   (array_in[50])"
.PP
.SS "#define TOP_RIGHT_END   (array_in[51])"
.PP
.SS "#define MID_LEFT_END   (array_in[52])"
.PP
.SS "#define MID_MID_END   (array_in[53])"
.PP
.SS "#define MID_RIGHT_END   (array_in[54])"
.PP
.SS "#define BOTTOM_LEFT_END   (array_in[55])"
.PP
.SS "#define BOTTOM_MID_END   (array_in[56])"
.PP
.SS "#define BOTTOM_RIGHT_END   (array_in[57])"
.PP
.SS "#define TOP_LEFT_CROSS   (array_in[58])"
.PP
.SS "#define TOP_MID_CROSS   (array_in[59])"
.PP
.SS "#define TOP_RIGHT_CROSS   (array_in[60])"
.PP
.SS "#define MID_LEFT_CROSS   (array_in[61])"
.PP
.SS "#define MID_MID_CROSS   (array_in[62])"
.PP
.SS "#define MID_RIGHT_CROSS   (array_in[63])"
.PP
.SS "#define BOTTOM_LEFT_CROSS   (array_in[64])"
.PP
.SS "#define BOTTOM_MID_CROSS   (array_in[65])"
.PP
.SS "#define BOTTOM_RIGHT_CROSS   (array_in[66])"
.PP
.SS "#define ONE_HOLE   (array_in[67])"
.PP
.SS "#define TWO_HOLES   (array_in[68])"
.PP
.SS "#define HEY_PART   (array_in[69])"
.PP
.SS "#define DOT_PART   (array_in[70])"
.PP
.SS "#define COMMA_PART   (array_in[71])"
.PP
.SS "#define HOLE_TOP_LEFT_EDGE   (array_in[72])"
.PP
.SS "#define HOLE_MID_LEFT_EDGE   (array_in[73])"
.PP
.SS "#define HOLE_BOTTOM_LEFT_EDGE   (array_in[74])"
.PP
.SS "#define HOLE_TOP_RIGTH_EDGE   (array_in[75])"
.PP
.SS "#define HOLE_MID_RIGTH_EDGE   (array_in[76])"
.PP
.SS "#define HOLE_BOTTOM_RIGTH_EDGE   (array_in[77])"
.PP
.SS "#define HOLE_LEFT_TOP_EDGE   (array_in[78])"
.PP
.SS "#define HOLE_MID_TOP_EDGE   (array_in[79])"
.PP
.SS "#define HOLE_RIGHT_TOP_EDGE   (array_in[80])"
.PP
.SS "#define HOLE_LEFT_BOTTOM_EDGE   (array_in[81])"
.PP
.SS "#define HOLE_MID_BOTTOM_EDGE   (array_in[82])"
.PP
.SS "#define HOLE_RIGHT_BOTTOM_EDGE   (array_in[83])"
.PP
.SS "#define HOLE_HEIGHT   (array_in[84])"
.PP
.SS "#define HOLE_WIDTH   (array_in[85])"
.PP
.SS "#define HOLE_TOP   (array_in[86])"
.PP
.SS "#define HOLE_BOTTOM   (array_in[87])"
.PP
.SS "#define HOLE_TOP_LEFT   (array_in[88])"
.PP
.SS "#define HOLE_TOP_RIGHT   (array_in[89])"
.PP
.SS "#define HOLE_BOTTOM_LEFT   (array_in[90])"
.PP
.SS "#define HOLE_BOTTOM_RIGHT   (array_in[91])"
.PP
.SS "#define BIG_TOP_LEFT_EDGE   (array_in[92])"
.PP
.SS "#define BIG_MID_LEFT_EDGE   (array_in[93])"
.PP
.SS "#define BIG_BOTTOM_LEFT_EDGE   (array_in[94])"
.PP
.SS "#define BIG_TOP_RIGTH_EDGE   (array_in[95])"
.PP
.SS "#define BIG_MID_RIGTH_EDGE   (array_in[96])"
.PP
.SS "#define BIG_BOTTOM_RIGTH_EDGE   (array_in[97])"
.PP
.SS "#define BIG_LEFT_TOP_EDGE   (array_in[98])"
.PP
.SS "#define BIG_MID_TOP_EDGE   (array_in[99])"
.PP
.SS "#define BIG_RIGHT_TOP_EDGE   (array_in[100])"
.PP
.SS "#define BIG_LEFT_BOTTOM_EDGE   (array_in[101])"
.PP
.SS "#define BIG_MID_BOTTOM_EDGE   (array_in[102])"
.PP
.SS "#define BIG_RIGHT_BOTTOM_EDGE   (array_in[103])"
.PP
.SH "Function Documentation"
.PP 
.SS "int ho_recognize_array_in_size ()"
.PP
.SS "int ho_recognize_array_out_size ()"
.PP
.SS "int ho_recognize_create_array_in (const \fBho_bitmap\fP * m_text, const \fBho_bitmap\fP * m_mask, double * array_in)"
.PP
.SS "int ho_recognize_create_array_out (const double * array_in, double * array_out, int font_code)"
.PP
.SS "const char* ho_recognize_array_out_to_font (const double * array_out)"
.PP
.SS "const char* ho_recognize_font (const \fBho_bitmap\fP * m_text, const \fBho_bitmap\fP * m_mask, int font_code)"
.PP
.SS "int ho_recognize_dimentions (const \fBho_bitmap\fP * m_text, const \fBho_bitmap\fP * m_mask, double * height, double * width, double * top, double * bottom, double * top_left, double * top_mid, double * top_right, double * mid_left, double * mid_right, double * bottom_left, double * bottom_mid, double * bottom_right, double * has_two_hlines_up, double * has_two_hlines_down, double * has_three_hlines_up, double * has_three_hlines_down)"
.PP
.SS "int ho_recognize_bars (const \fBho_bitmap\fP * m_text, const \fBho_bitmap\fP * m_mask, double * has_top_bar, double * has_mid_hbar, double * has_bottom_bar, double * has_left_bar, double * has_mid_vbar, double * has_right_bar, double * has_diagonal_bar, double * has_diagonal_left_bar)"
.PP
.SS "int ho_recognize_edges (const \fBho_bitmap\fP * m_text, const \fBho_bitmap\fP * m_mask, double * has_top_left_edge, double * has_mid_left_edge, double * has_bottom_left_edge, double * has_top_right_edge, double * has_mid_right_edge, double * has_bottom_right_edge, double * has_left_top_edge, double * has_mid_top_edge, double * has_right_top_edge, double * has_left_bottom_edge, double * has_mid_bottom_edge, double * has_right_bottom_edge)"
.PP
.SS "int ho_recognize_edges_big (const \fBho_bitmap\fP * m_text, const \fBho_bitmap\fP * m_mask, double * has_top_left_edge, double * has_mid_left_edge, double * has_bottom_left_edge, double * has_top_right_edge, double * has_mid_right_edge, double * has_bottom_right_edge, double * has_left_top_edge, double * has_mid_top_edge, double * has_right_top_edge, double * has_left_bottom_edge, double * has_mid_bottom_edge, double * has_right_bottom_edge)"
.PP
.SS "int ho_recognize_notches (const \fBho_bitmap\fP * m_text, const \fBho_bitmap\fP * m_mask, double * has_top_left_notch, double * has_mid_left_notch, double * has_bottom_left_notch, double * has_top_right_notch, double * has_mid_right_notch, double * has_bottom_right_notch, double * has_left_top_notch, double * has_mid_top_notch, double * has_right_top_notch, double * has_left_bottom_notch, double * has_mid_bottom_notch, double * has_right_bottom_notch)"
.PP
.SS "int ho_recognize_parts (const \fBho_bitmap\fP * m_text, const \fBho_bitmap\fP * m_mask, double * has_one_hole, double * has_two_holes, double * has_hey_part, double * has_dot_part, double * has_comma_part)"
.PP
.SS "int ho_recognize_ends (const \fBho_bitmap\fP * m_text, const \fBho_bitmap\fP * m_mask, double * has_top_left_end, double * has_top_mid_end, double * has_top_right_end, double * has_mid_left_end, double * has_mid_mid_end, double * has_mid_right_end, double * has_bottom_left_end, double * has_bottom_mid_end, double * has_bottom_right_end, double * has_top_left_cross, double * has_top_mid_cross, double * has_top_right_cross, double * has_mid_left_cross, double * has_mid_mid_cross, double * has_mid_right_cross, double * has_bottom_left_cross, double * has_bottom_mid_cross, double * has_bottom_right_cross)"
.PP
.SS "int ho_recognize_holes_dimentions (const \fBho_bitmap\fP * m_text, const \fBho_bitmap\fP * m_mask, double * height, double * width, double * top, double * bottom, double * top_left, double * top_right, double * bottom_left, double * bottom_right)"
.PP
.SS "int ho_recognize_holes_edges (const \fBho_bitmap\fP * m_text, const \fBho_bitmap\fP * m_mask, double * has_top_left_edge, double * has_mid_left_edge, double * has_bottom_left_edge, double * has_top_right_edge, double * has_mid_right_edge, double * has_bottom_right_edge, double * has_left_top_edge, double * has_mid_top_edge, double * has_right_top_edge, double * has_left_bottom_edge, double * has_mid_bottom_edge, double * has_right_bottom_edge)"
.PP
.SH "Author"
.PP 
Generated automatically by Doxygen for libhocr from the source code.
