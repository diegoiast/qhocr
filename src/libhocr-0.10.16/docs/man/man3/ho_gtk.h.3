.TH "src/ho_gtk.h" 3 "23 Jul 2008" "Version 0.10.14" "libhocr" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/ho_gtk.h \- libhocr C language header. 
.SH SYNOPSIS
.br
.PP
\fC#include <gdk-pixbuf/gdk-pixbuf.h>\fP
.br
\fC#include <hocr.h>\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBHO_GTK_H\fP   1"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBho_pixbuf\fP * \fBho_gtk_pixbuf_from_gdk\fP (const GdkPixbuf *gdk_pix)"
.br
.ti -1c
.RI "\fBho_pixbuf\fP * \fBho_gtk_pixbuf_from_gdk_share_data\fP (const GdkPixbuf *gdk_pix)"
.br
.ti -1c
.RI "GdkPixbuf * \fBho_gtk_pixbuf_to_gdk\fP (const \fBho_pixbuf\fP *hocr_pix)"
.br
.ti -1c
.RI "\fBho_pixbuf\fP * \fBho_gtk_pixbuf_load\fP (const char *filename)"
.br
.ti -1c
.RI "int \fBho_gtk_pixbuf_save\fP (const \fBho_pixbuf\fP *pix, const char *filename, const char *ext)"
.br
.ti -1c
.RI "int \fBho_gtk_font_save\fP (const \fBho_bitmap\fP *m_text, const \fBho_bitmap\fP *m_nikud, const \fBho_bitmap\fP *m_mask, const char *filename, const char *ext)"
.br
.in -1c
.SH "Detailed Description"
.PP 
libhocr C language header. 

libhocr - LIBrary for Hebrew Optical Character Recognition 
.SH "Define Documentation"
.PP 
.SS "#define HO_GTK_H   1"
.PP
.SH "Function Documentation"
.PP 
.SS "\fBho_pixbuf\fP* ho_gtk_pixbuf_from_gdk (const GdkPixbuf * gdk_pix)"
.PP
new \fBho_pixbuf\fP from a gdk_pixbuf
.PP
\fBParameters:\fP
.RS 4
\fIgdk_pix\fP the pixbuf to copy 
.RE
.PP
\fBReturns:\fP
.RS 4
newly allocated \fBho_pixbuf\fP 
.RE
.PP

.SS "\fBho_pixbuf\fP* ho_gtk_pixbuf_from_gdk_share_data (const GdkPixbuf * gdk_pix)"
.PP
new \fBho_pixbuf\fP from a gdk_pixbuf
.PP
\fBParameters:\fP
.RS 4
\fIgdk_pix\fP the pixbuf to share data with 
.RE
.PP
\fBReturns:\fP
.RS 4
newly allocated \fBho_pixbuf\fP, share data with gtk pixbuf 
.RE
.PP

.SS "GdkPixbuf* ho_gtk_pixbuf_to_gdk (const \fBho_pixbuf\fP * hocr_pix)"
.PP
new gdk_pixbuf from a \fBho_pixbuf\fP
.PP
\fBParameters:\fP
.RS 4
\fIhocr_pix\fP the pixbuf to copy 
.RE
.PP
\fBReturns:\fP
.RS 4
newly allocated gdk_pixbuf 
.RE
.PP

.SS "\fBho_pixbuf\fP* ho_gtk_pixbuf_load (const char * filename)"
.PP
read \fBho_pixbuf\fP from file
.PP
\fBParameters:\fP
.RS 4
\fIfilename\fP file name 
.RE
.PP
\fBReturns:\fP
.RS 4
newly allocated \fBho_pixbuf\fP 
.RE
.PP

.SS "int ho_gtk_pixbuf_save (const \fBho_pixbuf\fP * pix, const char * filename, const char * ext)"
.PP
writes \fBho_pixbuf\fP to file
.PP
\fBParameters:\fP
.RS 4
\fIpix\fP \fBho_pixbuf\fP 8 or 24 bpp 
.br
\fIfilename\fP save as file name 
.br
\fIext\fP file type extention, e.g jpeg, png ... 
.RE
.PP
\fBReturns:\fP
.RS 4
FALSE 
.RE
.PP

.SS "int ho_gtk_font_save (const \fBho_bitmap\fP * m_text, const \fBho_bitmap\fP * m_nikud, const \fBho_bitmap\fP * m_mask, const char * filename, const char * ext)"
.PP
writes font to file
.PP
\fBParameters:\fP
.RS 4
\fIm_text\fP \fBho_bitmap\fP of main font 
.br
\fIm_nikud\fP \fBho_bitmap\fP of nikud 
.br
\fIm_mask\fP \fBho_bitmap\fP of line 
.br
\fIfilename\fP save as file name 
.br
\fIext\fP file type extention, e.g jpeg, png ... 
.RE
.PP
\fBReturns:\fP
.RS 4
FALSE 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for libhocr from the source code.
